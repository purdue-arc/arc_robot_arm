#!/usr/bin/env python3
import yaml
import rospy

from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import JointState

# IK TEST CASES
# x y z - POV of arm
test_pose_goals = [
    [-0.2, 0, 0.15],     # gripper down
    [-0.2, 0.1, 0.15],   # gripper right
    [-0.2, -0.1, 0.15],  # gripper left
]

# J1 J2 J3 J4 J5 (radians)
test_joint_states = [
    [-0.0169296936004711, 0.29984756294442627, 1.0763445405577863, 0, -0.1696460018521434], # Camera scan position
]


def _to_joint_state_msg(joints, joint_names):
    assert(len(joints) == 5)
    joint_state = JointState()
    joint_state.position = [float(joint) for joint in joints]
    joint_state.name = joint_names
    return joint_state


def _to_pose_stamped_msg(p):
    assert(len(p) == 3)
    pose = PoseStamped()
    pose.pose.position.x = float(p[0])
    pose.pose.position.y = float(p[1])
    pose.pose.position.z = float(p[2])
    return pose


if __name__ == '__main__':
    rospy.init_node('test_kinematics')

    pose_pub = rospy.Publisher('move_to_pose', PoseStamped, queue_size=1000)
    joint_state_pub = rospy.Publisher('move_to_joint_state', JointState, queue_size=1000)
    poses = [_to_pose_stamped_msg(pose) for pose in test_pose_goals]

    joint_names = ['Rev1', 'Rev2', 'Rev3', 'Rev4', 'Rev5']
    joint_states = [_to_joint_state_msg(joint_state, joint_names) for joint_state in test_joint_states] 

    r = rospy.Rate(10)

    while(pose_pub.get_num_connections() == 0):
        r.sleep()

    for pose in poses:
        pose_pub.publish(pose)
        r.sleep()

    '''
    while(joint_state_pub.get_num_connections() == 0):
        r.sleep()

    for joint_state in joint_states:
        joint_state_pub.publish(joint_state)
        r.sleep()
    '''
