#!/usr/bin/env python
"""Node to send path planning commands to Robot arm MoveGroup.

License removed for brevity
"""

# Python 2/3 compatibility imports
from __future__ import print_function
from six.moves import input

import rospy
import moveit_commander
import sys
import moveit_msgs
from geometry_msgs.msg import Point, Pose, PoseStamped
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import ikpy
import numpy as np


def all_close(goal, actual, tolerance):
  """
  Convenience method for testing if a list of values are within a tolerance of their counterparts in another list
  @param: goal       A list of floats, a Pose or a PoseStamped
  @param: actual     A list of floats, a Pose or a PoseStamped
  @param: tolerance  A float
  @returns: bool
  """
  all_equal = True
  if type(goal) is list:
    for index in range(len(goal)):
      if abs(actual[index] - goal[index]) > tolerance:
        return False

  elif type(goal) is geometry_msgs.msg.PoseStamped:
    return all_close(goal.pose, actual.pose, tolerance)

  elif type(goal) is geometry_msgs.msg.Pose:
    return all_close(pose_to_list(goal), pose_to_list(actual), tolerance)

  return True


class RobotArmPathPlanner(object):
    "RobotArmPlanner"

    def __init__(self):
        super(RobotArmPathPlanner, self).__init__()
        # First initialize `moveit_commander`_ and a `rospy`_ node:
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('RobotArmPathPlanner', anonymous=True)

        # Instantiate a `RobotCommander`_ object. Provides information such as the robot's
        # kinematic model and the robot's current joint states
        robot = moveit_commander.RobotCommander()

        # Instantiate a `PlanningSceneInterface`_ object.  This provides a remote interface
        # for getting, setting, and updating the robot's internal understanding of the
        # surrounding world:
        scene = moveit_commander.PlanningSceneInterface()

        # Instantiate a `MoveGroupCommander`_ object.  This object is an interface
        # to a planning group (group of joints).  In this tutorial the group is the primary
        # arm joints in the Panda robot, so we set the group's name to "panda_arm".
        # If you are using a different robot, change this value to the name of your robot
        # arm planning group.
        # This interface can be used to plan and execute motions:
        group_name = "arm"
        move_group = moveit_commander.MoveGroupCommander(group_name)
        move_group.set_planning_time(10)
        move_group.set_num_planning_attempts(5)
        print(robot.get_current_state())
        move_group.set_start_state(robot.get_current_state())

        # Create a `DisplayTrajectory`_ RO S publisher which is used to display
        # trajectories in Rviz:
        display_trajectory_publisher = rospy.Publisher(
            '/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=20)

        # Getting Basic Information
        # ^^^^^^^^^^^^^^^^^^^^^^^^^
        # We can get the name of the reference frame for this robot:
        planning_frame = move_group.get_planning_frame()
        print("============ Planning frame: %s" % planning_frame)

        # We can also print the name of the end-effector link for this group:
        eef_link = move_group.get_end_effector_link()
        print("============ End effector link: %s" % eef_link)

        # We can get a list of all the groups in the robot:
        group_names = robot.get_group_names()
        print("============ Available Planning Groups:", robot.get_group_names())

        # Sometimes for debugging it is useful to print the entire state of the
        # robot:
        print("============ Printing robot state")
        print(move_group.get_current_pose(end_effector_link="gripper_base_v1_1"))
        # Misc variables
        self.box_name = ''
        self.robot = robot
        self.scene = scene
        self.move_group = move_group
        self.display_trajectory_publisher = display_trajectory_publisher
        self.planning_frame = planning_frame
        self.eef_link = eef_link
        self.group_names = group_names

    # Arm Path Planning Related

    def plan_to_goal_pose(self, pose_pos):
        joints = self.inverse_kinematics(pose_pos)
        joints = joints[:-2]
        print(list(map(np.rad2deg,joints)))
        # The go command can be called with joint values, poses, or without any
        # parameters if you have already set the pose or joint target for the group
        plan = self.move_group.go(joints, wait=True)
        # Calling `stop()` ensures that there is no residual movement
        self.move_group.stop()
        
        # It is always good to clear your targets after planning with poses.
        # Note: there is npose_goalo equivalent function for clear_joint_value_targets()
        self.move_group.clear_pose_targets()

        print("============ Printing final position")
        print(self.move_group.get_current_pose(end_effector_link="gripper_base_v1_1"))
    
    # Object Relatedself.move_group.get_current_pose(end_effector_link="gripper_base_v1_1")

    def create_box(self, box_dim, box_loc):
        pass

    def attach_box(self):
        pass
    
    def release_box(self):
        pass
    
    # End Effector Related

    def open_eef(self):
        pass

    def close_eef(self):
        pass

    def release_object(self):
        pass

    def go_home(self):
        joints = [0,0,0,0,0]
        plan = self.move_group.go(joints, wait=True)
        # Calling `stop()` ensures that there is no residual movement
        self.move_group.stop()
        
        # It is always good to clear your targets after planning with poses.
        # Note: there is npose_goalo equivalent function for clear_joint_value_targets()
        self.move_group.clear_pose_targets()

        print("============ Printing final position")
        print(self.move_group.get_current_pose(end_effector_link="gripper_base_v1_1"))

    def inverse_kinematics(self,target_pose):
        arm_chain = ikpy.chain.Chain.from_urdf_file("/home/raghavauppuluri/ws_moveit/src/arc_robot_arm/arc_robot_arm/nodes/arc_robot_arm_urdf.urdf")
        return(arm_chain.inverse_kinematics(target_position=target_pose))
def main():
  try:
    planner = RobotArmPathPlanner()
    # pose1 = [0.25,0.25,0.02]
    # planner.plan_to_goal_pose(pose1)
    # planner.go_home()
    # pose2 = [-0.25,-0.25,0.02]
    # planner.plan_to_goal_pose(pose2)

  except rospy.ROSInterruptException:
    return
  except KeyboardInterrupt:
    return

if __name__ == '__main__':
  main()

