#!/usr/bin/env python3

import rospy
import cv2
import numpy as np

from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class VisualServoing:

	def __init__(self):
		image_sub_topic = rospy.get_param("image_topic")
		self.image_pub = rospy.Publisher("visual_servoing_image", Image, queue_size=1000)

		self.bridge = CvBridge()
		self.frame = None 
		self.image_sub = rospy.Subscriber(image_sub_topic, Image, self.image_callback)

	def get_color_mask(self, hsv_color_range):
			'''Convert self.frame to HSV and and threshold image to given color range in HSV.
			
			Arguments:	
			hsv_color_range -- tuple of np arrays (lower color bound, upper color bound)	
			'''
			lower_bound, upper_bound = hsv_color_range

			hsvFrame = cv2.cvtColor(self.frame,cv2.COLOR_BGR2HSV)
			mask = cv2.inRange(hsvFrame, lower_bound, upper_bound)

			# Morphological Transform, Dilation
			kernal = np.ones((5,5),'uint8')	
			mask = cv2.dilate(mask, kernal)

			return mask

	def get_bbox_color(self, hsv_color_range):
		'''Create contour around color mask of given range and return rectangle bounding box.
		
		Arguments:	
		hsv_color_range -- tuple of np arrays (lower color bound, upper color bound)	
		'''
		if self.frame is not None:
			mask = self.get_color_mask(hsv_color_range)

			# Creating contour to track red color
			contours, hierarchy = cv2.findContours(mask,
																						 cv2.RETR_TREE,
																						 cv2.CHAIN_APPROX_SIMPLE)
				
			if (len(contours) != 0) : 
				contour = contours[0]
				if cv2.contourArea(contour) :
					bbox = cv2.boundingRect(contour)
					return bbox

	def image_callback(self, image_data):
		'''ROS Callback for image_topic
		
		Arguments:	
		image_data -- message of type sensor_msgs.Image
		'''
		try:
			self.frame = self.bridge.imgmsg_to_cv2(image_data, "bgr8")

			# Color range for white chess piece (lower, upper) 
			chess_white = (np.array([15, 61, 33]), np.array([21, 139, 250]))

			bbox = self.get_bbox_color(chess_white);
			if(bbox is not None): 
				height,width,dims = self.frame.shape
				self.frame = cv2.drawMarker(self.frame, (round(width/2),round(height/2)), (0,0,255), 
							markerSize=30, thickness=2, line_type=cv2.MARKER_CROSS)
				x,y,width,height = bbox
				cv2.rectangle(self.frame, (x, y), (x + width, y + height), (255,0,0), 2)

			self.image_pub.publish(self.bridge.cv2_to_imgmsg(self.frame, "bgr8"))
			
		except CvBridgeError as e:
			print(e)

if __name__ == '__main__':
	rospy.init_node('vs_node')
	vs = VisualServoing()

	rospy.spin()
