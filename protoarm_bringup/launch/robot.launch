<launch>
  <!-- Default params -->
  <arg name="chess" default="false"/>
  <arg name="realsense" default="false"/>

  <arg name="verbose" default="false"/>
  <arg name="urdf_path" default="$(find protoarm_description)/urdf/protoarm.xacro" unless="$(arg realsense)"/>
  <arg name="srdf_path" default="$(find protoarm_description)/urdf/protoarm.srdf" unless="$(arg realsense)"/>
  <arg name="world_name" default="worlds/empty.world" unless="$(arg chess)"/>
  <arg name="gazebo_spawn_coords" default="-x 0 -y 0 -z 0" unless="$(arg chess)"/>

  <!-- Runs robot arm with realsense -->
  <arg name="urdf_path" default="$(find protoarm_description)/urdf/protoarm_realsense.xacro" if="$(arg realsense)"/>
  <arg name="srdf_path" default="$(find protoarm_description)/urdf/protoarm_realsense.srdf" if="$(arg realsense)"/>

  <!-- MoveIt -->
  <include file="$(find protoarm_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="pipeline" value="ompl"/>
    <arg name="debug" value="false"/>
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find protoarm_moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find protoarm_moveit_config)/launch/moveit.rviz"/>
    <arg name="debug" value="false"/>
  </include> 

  <!-- The robot description that corresponds to the URDF -->
  <param name="robot_description" command="xacro '$(arg urdf_path)'"/>

  <!-- The semantic description that corresponds to the URDF -->
  <param name="robot_description_semantic" textfile="$(arg srdf_path)" />

  <!-- rosserial -->
  <node pkg="rosserial_python" type="serial_node.py" name="rosserial" output="screen">
    <param name="port" value="/dev/ttyACM0" />
    <param name="baud" value="57600" />
  </node>

  <!-- Runs depthai camera and apriltag detection code -->
  <include file="$(find protoarm_bringup)/launch/localization.launch"/>

  <!-- rosserial -->
  <node name="test_kinematics" pkg="protoarm_kinematics" type="test_kinematics"/>
</launch>